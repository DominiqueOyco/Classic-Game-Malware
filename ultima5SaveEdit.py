#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct 20 21:06:57 2019

@author: Dominique Oyco (014605758)

Tools Used: Hex Fiend (MAC OS) to find the values of each attributes and the
offset (location) of the players and attributes on the ultima 5 save file
"""

import os

#file destination in my system is Username/DOSBOX/Ultima_5
gamSavLocation = os.path.expanduser("~/DOSBox/Ultima_5/SAVED.GAM")

"""
This section is building the dictionaries which stores the important items in 
this assignment
"""
#This dictionary contains the players present in the game. Besides me, the game
#save file also have 15 other players in it. 
gamePlayers = {1: "USER", 2: "SHAMINO", 3: "IOLO", 4: "MARIAH", 
               5: "GEOFFREY", 6: "JAANA", 7: "JULIA", 8: "DUPRE", 
               9: "KATRINA", 10: "SENTRI", 11: "GWENNO",  12: "JOHNE",
               13: "GORN", 14: "MAXWELL", 15: "TOSHI", 16: "SADUJ"}

#This dictionary contains the attributes that each player have on their stats
playerAttributes = {1: "STRENGTH", 2: "INTELLIGENCE", 3: "DEXTERITY", 4: "HP",
                    5: "MAXHP", 6: "EXPERIENCE", 7: "MAGIC"}

#This dictionary contains the items each player can obtain in the game
playerItems = {1: "GOLD", 2: "KEYS", 3: "SKULL KEYS", 4: "GEMS", 
               5: "BLACK BADGE", 6: "MAGIC CARPET", 7: "MAGIC AXE"}

#This dictionary contains the maximum value each player attribute can have
maxAttributeValues = {"STRENGTH": 255, "INTELLIGENCE": 255, "DEXTERITY": 255, 
                      "HP": 65535, "MAXHP": 65535, "EXPERIENCE": 65535,
                      "MAGIC": 255}

#this dictionary contains the maximum values for the items
maxItemValue = {"GOLD": 65535, "KEYS": 255, "SKULL KEYS": 255, "GEMS": 255, 
                "BLACK BADGE": 255, "MAGIC CARPET": 255, "MAGIC AXE": 255}

#This dictionary contains the offset of each player which indicates where in 
#the save file they are located. The offset location is determined by the 
#Hex Editor
#i.e. ACCORDING TO HEX FIEND, SHAMINO IS LOCATED AT THE OFFSET 0X22 WHEN THE 
#ENTIRE WORD SHAMINO IS HIGHLIGHTED ON THE EDITOR
gamePlayerOffset = {"USER": int('0x02', 16), "SHAMINO": int('0x22', 16), 
                    "IOLO": int('0x42', 16), "MARIAH": int('0x62', 16), 
                    "GEOFFREY": int('0x82', 16), "JAANA": int('0xA2', 16),
                    "JULIA": int('0xC2', 16), "DUPRE": int('0xE2', 16), 
                    "KATRINA": int('0x102', 16), "SENTRI": int('0x122', 16),
                    "GWENNO": int('0x142', 16), "JOHNE": int('0x162', 16), 
                    "GORN": int('0x182', 16), "MAXWELL": int('0x1A2', 16), 
                    "TOSHI": int('0x1C2', 16), "SADUJ": int('0x1E2', 16)}

#This dictionary contains the offset of each attribute which indicates where in 
#the save file they are located. The offset location is determined by the 
#Hex Editor. HAD TO ADJUST THE OFFSETS A LITTLE BIT BECAUSE IN HEX FIEND, THERE
#ARE FOUR SPACES AT THE BEGINNING AND THE VALUES ARE OFF. REMOVING THE FOUR 
#SPACES AT THE BEGINNING RESULTS IN THE GAME PLAYING A CUTSCENE INFINITELY.
attributeOffset = {"STRENGTH": int('0x0C', 16), "INTELLIGENCE": int('0x0E', 16),
                   "DEXTERITY": int('0x0D', 16), "HP": int('0x10', 16), 
                   "MAXHP": int('0x12', 16), "EXPERIENCE": int('0x14', 16),
                   "MAGIC": int('0x0F', 16)}
#This dictionary contains the offset of each items which indicates where in 
#the save file they are located. The offset location is determined by the 
#Hex Editor
playerItemOffset = {"GOLD": int('0x204', 16), "KEYS": int('0x206', 16), 
            "SKULL KEYS": int('0x20B', 16), "GEMS": int('0x207', 16), 
            "BLACK BADGE": int('0x218', 16), "MAGIC CARPET": int('0x20A', 16),
            "MAGIC AXE": int('0x240', 16)}

"""
This section is all about the processing the data inside the dictionary
and using the data to edit the save file of the game
"""

"""
Reads the data from the sav file and saves it inside a list. 
"""
def readData():
    #rb means that we read the contents of the sav file w
    with open(gamSavLocation, "rb") as playerSave: 
        #store it inside a byte array because were dealing with hex values
        savData = list(bytearray(playerSave.read())) 
        playerSave.close()
        return savData
    
"""
This function writes the edited data into the saved.gam file
@param: data - the data from the SAVED.GAM file
"""
def writeData(data):
    #wb allows us to write in terms of binary in the gam file
    with open(gamSavLocation, "wb") as playerSave: 
        playerSave.write(bytearray(data))
        playerSave.close()

"""
If the user picked the first option for the menu, player attributes are edited
through this function
@param player: the player in the game whose attribute is to be edited. 
                    could be the player itself or the other players in the 
                    game
@param data: the data from the SAVED.GAM file
"""
def editAttributes(player, data):
    print("Which attribute do you want to edit?\n")
    
    #display the choices the user can choose on the menu
    #.format() lets me print the main menu nicely
    print("1. {}\n2. {}\n3. {}\n4. {}\n5. {}\n6. {}\n7. {}".format(
            playerAttributes[1], playerAttributes[2], playerAttributes.get(3),
            playerAttributes.get(4), playerAttributes[5], playerAttributes[6],
            playerAttributes[7]))
    
    #error validation
    #checking if the user enters a value from 1-7. If not then make them enter
    #a value from 1-7
    while(True):
        try:
            userChoice = int(input()) #container to determine if the user input
                                      #is legitimate
        except ValueError: #value not an int. Could be a float or string
            print("Not valid! Please select a number from 1 - 7\n")
            continue
        if(userChoice < 1 or userChoice > 7): #value is an int but not in the range
            print("Not valid! Please select a number from 1 - 7\n")
            continue
        else:
            break #get out of the loop if value is legitimate
        
    #accessing the playerAttribute dictionary and storing the corresponding 
    #value to attributeToChange    
    attributeToChange = playerAttributes[userChoice]
    maxValue = maxAttributeValues[attributeToChange]

    #we want the index to be the sum of the attribute offset & player offset
    #because it determines the location of the attribute to be changed and which
    #player the attribute is assigned to.
    index = attributeOffset[attributeToChange] + gamePlayerOffset[gamePlayers[player]]
        
    #This is the part where the user can change the value their stats in the
    #game for something higher or something lower.      
    while(True):
        try:
            desiredValue = int(input("Current Value For {}'s {} is {}. " \
                                "Please Enter a Value from 0 - {} to "\
                                "edit {} ".format(gamePlayers[player], 
                                  attributeToChange, data[index], maxValue, 
                                  attributeToChange)))
            
        #were only accepting input value from 1-16 since there are 16 players
        #in the game including the user
        except ValueError:
            print("Not valid! Please Select A Number 0 -", maxValue)
            continue        
        if(desiredValue < 0 or desiredValue > maxValue):
            print("Not valid! Please Select A Number 0 -", maxValue)
            continue        
        else:
            break
        
    #We are using little endian on this program since the offsets and the 
    #attribute values in the hex editor was determined in little endian.
    #Little endian is where the most significant bit is the highest value and 
    #the least significant bit is the lowest value
    counter = 0
    itemArray = list(bytearray((desiredValue).to_bytes(2, byteorder="little")))
    
    if(len(itemArray) == 1):
        itemArray.insert(0, 0)
        
    for i in itemArray:
        data[index + counter] = i
        counter += 1
        
    print("{} Updated to {}".format(attributeToChange, desiredValue))
    
    userChoice = input("Would you like to edit another stat? " \
                       "Please enter Y for yes or N for No\n")
    
    #Whether it's in uppercase or lowercase, the ignore the case the user input
    #is in.
    while((userChoice.lower() != "y" and userChoice.lower() != "n")):
        userChoice = input("Not valid! Select either Y for Yes or N for No!\n")
    if(userChoice.lower() == "y"):
        editAttributes(player, data) #repeat the process again if user said yes
       
"""
Lets the user to edit the amount of items they have in the game
@param: item - the item that the user wants to edit.
@param: data - the data from the SAVED.GAM file
"""
def editItemValues(item, data):
    itemName = playerItems[item]
    maxValue = maxItemValue[itemName]
    index = playerItemOffset[itemName]
    
    #hex allows us to convert an int value to hex
    if(maxValue > 255 and data[index] > 0):
        currentValue = int(hex(data[index])[2:] + hex(data[index + 1])[2:], 16)
    elif(maxValue > 255 and data[index] == 0):
        currentValue = data[index + 1]
    else:
        currentValue = data[index]

    while(True):
        try:
            desiredValue = int(input("Current Amount of {} in Inventory is {}. "\
                                     "Please Enter a Value From 0 - {} to Edit "\
                                     "Amount\n".format(itemName, currentValue,
                                                       maxValue)))
    #error validation
        except ValueError:
            print("Not Valid! Please select a number from 0 -", maxValue)
            continue
        if(desiredValue < 0 or desiredValue > maxValue):
            print("Not Valid! Please select a number from 0 -", maxValue)
            continue
        else:
            break
            
    #We are using little endian on this program since the offsets and the 
    #attribute values in the hex editor was determined in little endian.
    #Little endian is where the most significant bit is the highest value and 
    #the least significant bit is the lowest value        
    itemArray = list(bytearray((desiredValue).to_bytes(2, byteorder="little")))
    count = 0
    
    #we're inserting a 0 at the beginning because the sav file has single digit
    #hex values formatted with a zero beside it. i.e. 01, 09
    if(len(itemArray) == 1):
        itemArray.insert(0, 0) 
    for i in itemArray:
        data[index + count] = i
        count += 1
        
    print("The amount of item {} is now updated to {}".format(itemName, 
          desiredValue))
    
    userChoice = input("Edit Another Amount? Enter Y for Yes or N for No\n")
    
    #error validation
    while((userChoice.lower() != "y" and userChoice.lower() != "n")):
        userChoice = input("Not Valid! Pick Y for Yes or N for No\n")
    if(userChoice.lower() == "y"):
        selectItem(data)
    elif(userChoice.lower() == "n"):
        print("Going back to the Main Menu...\n")
        mainMenu(data)

"""
Lets the user select which player in the game whose attributes they want to 
edit
@param: data - the data from the SAVED.GAM file
"""
def selectGamePlayer(data):
    print("Which player Would You Like to Edit?")
    print("1.  {}\n2.  {}\n3.  {}\n4.  {}\n5.  {}\n6.  {}\n7.  {}"\
          "\n8.  {}\n9.  {}\n10. {}\n11. {}\n12. {}\n13. {}\n14. {}\n15. {}"\
          "\n16. {}".format(gamePlayers[1], gamePlayers[2], gamePlayers[3], 
                     gamePlayers[4], gamePlayers[5], gamePlayers[6], 
                     gamePlayers[7], gamePlayers[8], gamePlayers[9],
                     gamePlayers[10], gamePlayers[11], gamePlayers[12],
                     gamePlayers[13], gamePlayers[14], gamePlayers[15],
                     gamePlayers[16]))
    
    #validating the user input
    while(True):
        try:
            userChoice = int(input())
        except ValueError:
            print("Not Valid! Please Select A Number from 1-16 to Select your "\
                  "player.")
            continue
        if(userChoice < 1 or userChoice > 16):
            print("Not Valid! Please Select A Number from 1-16 to Select your "\
                  "player.")
            continue
        else:
            break
    editAttributes(userChoice, data)
    
    #if the user wants to keep editing a player or not
    userChoice = input("Keep editing another player? Enter Y for yes "\
                       "or N for No\n")
    #User has to answer y or n for the input to be valid
    while((userChoice.lower() != "y" and userChoice.lower() != "n")):
        userChoice = input("Please Select Either Y for Yes or N for No "\
                           "to Confirm Your userChoice\n")
        
    if(userChoice.lower() == "y"):
        selectGamePlayer(data)
        
    print("Going back to the Main Menu...\n")
    mainMenu(data)

"""
This function is responsible for validating the user input if the user wanted
to edit item count. It directs the input to the item count editor if the user
input is valid and if the input is not valid, it forces the user to provide a
valid input
@param: data - the data from the SAVED.GAM file
"""
def selectItem(data):
    print("Which Item Should be edited?")
    print("1.  {}\n2.  {}\n3.  {}\n4.  {}\n5.  {}\n6.  {}\n7.  {}".format(
            playerItems[1], playerItems[2], playerItems[3], playerItems[4], 
            playerItems[5], playerItems[6], playerItems[7]))
    
    while(True):
        try:
            userChoice = int(input())
        #error validation
        except ValueError:
            print("Not Valid! Pick a value from 1-7 to edit an item\n")
            continue
        if(userChoice < 1 or userChoice > 7):
            print("Not Valid! Pick a value from 1-7 to edit an item\n")
            continue
        else:
            break
        
    editItemValues(userChoice, data)

gameData = readData() #get the data from the sav file 

"""
The main class just displays the options that user can do to edit their 
Ultima 5 save file. It also directs the selected option to the designated 
function so the task can be performed.
@param: data - the data from the SAVED.GAM file
"""
def mainMenu(data):
    print("This is the Ultima V Save Editor. Please Pick an option below on "\
          "the task you would like to perform\n")
    print("1. Edit Player Attributes")
    print("2. Edit Player Items")
    print("3. Save Your Progress")
    print("4. Exit The Program")
    
    userChoice = input()
    while(userChoice != "1" and userChoice != "2" and userChoice != "3"
          and userChoice != "4"):
        userChoice = input("Not Valid! Please Select Either 1, 2, 3, or 4\n")
    #direct to edit attributes    
    if(userChoice == "1"):
        selectGamePlayer(data)
    #direct to edit items    
    elif(userChoice == "2"):
        selectItem(data)
    #save progress  
    elif(userChoice == "3"):
        print("Saving...")
        writeData(data)
        print("The save file has been modified.\n")
        print("Please restart the game to see the updated changes\n")
        mainMenu(data)
    #close the program
    else:
        print("Thanks for using the program!")
        
mainMenu(gameData)